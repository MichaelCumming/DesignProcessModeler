// This file was automatically generated. Do not modify.
package dpm.content.state;

import java.util.*;
import de.renew.simulator.Net;
import dpm.content.state.*;
import dpm.content.*;
import net.jxta.peergroup.PeerGroup;
import dpm.dpmApp.desktop.DpmAppTopFrame;
import dpm.content.advertisement.AdvUtilities;
import dpm.dpmApp.desktop.DpmAppTopFrame;
import dpm.content.advertisement.*;
import dpm.content.advertisement.net.*;
import dpm.content.advertisement.designEntity.*;
import dpm.content.advertisement.designEntity.related.*;
import dpm.content.*;
import dpm.content.designEntity.*;



public class StateChangerNetAccessor extends de.renew.simulator.NetInstanceImpl {
    private Net scNet;
    private UserNamedEntity entity;
    private PeerGroup parentPG;
    private DpmAppTopFrame topFrame;
    private AdvUtilities advUtils;
    
    public StateChangerNetAccessor(UserNamedEntity entity, PeerGroup parentPG, DpmAppTopFrame topFrame)
    throws de.renew.unify.Impossible {
        super();
        this.entity = entity;
        this.parentPG = parentPG;
        this.topFrame = topFrame;
        this.advUtils = topFrame.getAdvUtils();
        
        //try {
//            de.renew.simulator.Net net = de.renew.simulator.Net.forName(topFrame.STATE_CHANGER_NET_NAME);
//            net.setEarlyTokens(true);
//            initNet(net, true);
//            createConfirmation(de.renew.simulator.SilentTracer.INSTANCE);
            //test();
            //printAllKnownNets();
            
//        } catch (de.renew.simulator.NetNotFoundException e) {
//            throw new RuntimeException(e.toString());
//        } catch (de.renew.unify.Impossible e) {
//            throw new RuntimeException(e.toString());
//        }
    }
    
    public void test() {
        addRole("r1", "r2", "r3", "r4");
        addInput("i1", "i2", "i3", "i4");
        addPol("p1", "p2");
        setPolsNum(5);
        //setCurTrans("curTransTest");
    }
    
    /** Generated by Renew: */
    public void addRole(final String ppx, final String pprole, final String ppauthorID, final String ppauthorName) {
        final Object vvrole=pprole;
        final Object vvauthorID=ppauthorID;
        final Object vvx=ppx;
        final Object vvauthorName=ppauthorName;
        de.renew.unify.Tuple inTuple;
        de.renew.unify.Tuple outTuple;
        inTuple=new de.renew.unify.Tuple(4);
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvx,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(1),vvrole,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(2),vvauthorID,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(3),vvauthorName,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        outTuple=de.renew.call.SynchronisationRequest.synchronize(
        (de.renew.simulator.NetInstance)this,"addRole",inTuple);
    }
    
    /** Generated by Renew: */
    public void addInput(final String pptrans, final String pprole, final String ppauthorID, final String ppauthorName) {
        final Object vvrole=pprole;
        final Object vvtrans=pptrans;
        final Object vvauthorID=ppauthorID;
        final Object vvauthorName=ppauthorName;
        de.renew.unify.Tuple inTuple;
        de.renew.unify.Tuple outTuple;
        inTuple=new de.renew.unify.Tuple(4);
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvtrans,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(1),vvrole,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(2),vvauthorID,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(3),vvauthorName,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        outTuple=de.renew.call.SynchronisationRequest.synchronize(
        (de.renew.simulator.NetInstance)this,"addInput",inTuple);
    }
    
    /** Generated by Renew: */
    public void addPol(final String pptrans, final String pprole) {
        final Object vvrole=pprole;
        final Object vvtrans=pptrans;
        de.renew.unify.Tuple inTuple;
        de.renew.unify.Tuple outTuple;
        inTuple=new de.renew.unify.Tuple(2);
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvtrans,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(1),vvrole,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        outTuple=de.renew.call.SynchronisationRequest.synchronize(
        (de.renew.simulator.NetInstance)this,"addPol",inTuple);
    }
    
    /** Generated by Renew: */
    public void setPolsNum(final int ppnum) {
        final Object vvnum=new de.renew.util.Value(new java.lang.Integer(ppnum));
        de.renew.unify.Tuple inTuple;
        de.renew.unify.Tuple outTuple;
        inTuple=new de.renew.unify.Tuple(1);
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvnum,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        outTuple=de.renew.call.SynchronisationRequest.synchronize(
        (de.renew.simulator.NetInstance)this,"setPolsNum",inTuple);
    }
    
    public void addPeerRoles(final ContentStorage pppeerRoles) {
        final Object vvpeerRoles=pppeerRoles;
        de.renew.unify.Tuple inTuple;
        de.renew.unify.Tuple outTuple;
        inTuple=new de.renew.unify.Tuple(1);
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvpeerRoles,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        outTuple=de.renew.call.SynchronisationRequest.synchronize(
        (de.renew.simulator.NetInstance)this,"addPeerRoles",inTuple);
    }
    
    public void addStateChanger(final DesignEntityStateChanger pptsc) {
        final Object vvtsc=pptsc;
        de.renew.unify.Tuple inTuple;
        de.renew.unify.Tuple outTuple;
        inTuple=new de.renew.unify.Tuple(1);
        try {
            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvtsc,null);
        } catch (de.renew.unify.Impossible e) {
            throw new RuntimeException("Unification failed unexpectedly.");
        }
        outTuple=de.renew.call.SynchronisationRequest.synchronize(
        (de.renew.simulator.NetInstance)this,"addTaskStateChanger",inTuple);
    }
    
    /** Generated by Renew: */
    //    public void setCurTrans(final String ppcurTrans) {
    //        final Object vvcurTrans=ppcurTrans;
    //        de.renew.unify.Tuple inTuple;
    //        de.renew.unify.Tuple outTuple;
    //        inTuple=new de.renew.unify.Tuple(1);
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvcurTrans,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        outTuple=de.renew.call.SynchronisationRequest.synchronize(
    //        (de.renew.simulator.NetInstance)this,"setCurTrans",inTuple);
    //    }
    
    //    public void setNextTrans(final String ppnextTrans) {
    //        final Object vvnextTrans=ppnextTrans;
    //        de.renew.unify.Tuple inTuple;
    //        de.renew.unify.Tuple outTuple;
    //        inTuple=new de.renew.unify.Tuple(1);
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvnextTrans,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        outTuple=de.renew.call.SynchronisationRequest.synchronize(
    //        (de.renew.simulator.NetInstance)this,"setNextTrans",inTuple);
    //    }
    
    /** Generated by Renew: */
    //    public void addNextTrans(final String pptrans, final String ppnextTrans) {
    //        final Object vvnextTrans=ppnextTrans;
    //        final Object vvtrans=pptrans;
    //        de.renew.unify.Tuple inTuple;
    //        de.renew.unify.Tuple outTuple;
    //        inTuple=new de.renew.unify.Tuple(2);
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvtrans,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(1),vvnextTrans,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        outTuple=de.renew.call.SynchronisationRequest.synchronize(
    //        (de.renew.simulator.NetInstance)this,"addNextTrans",inTuple);
    //    }
    
    //    public void addNextStateName(final String ppstateName) {
    //        final Object vvstateName=ppstateName;
    //        de.renew.unify.Tuple inTuple;
    //        de.renew.unify.Tuple outTuple;
    //        inTuple=new de.renew.unify.Tuple(1);
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvstateName,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        outTuple=de.renew.call.SynchronisationRequest.synchronize(
    //        (de.renew.simulator.NetInstance)this,"addNextStateName",inTuple);
    //    }
    
    //    public void addTask(final Task pptask) {
    //        final Object vvtask=pptask;
    //        de.renew.unify.Tuple inTuple;
    //        de.renew.unify.Tuple outTuple;
    //        inTuple=new de.renew.unify.Tuple(1);
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvtask,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        outTuple=de.renew.call.SynchronisationRequest.synchronize(
    //        (de.renew.simulator.NetInstance)this,"addTask",inTuple);
    //    }
    
    //    public void addParentPG(final PeerGroup ppparentPG) {
    //        final Object vvparentPG=ppparentPG;
    //        de.renew.unify.Tuple inTuple;
    //        de.renew.unify.Tuple outTuple;
    //        inTuple=new de.renew.unify.Tuple(1);
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvparentPG,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        outTuple=de.renew.call.SynchronisationRequest.synchronize(
    //        (de.renew.simulator.NetInstance)this,"addParentPG",inTuple);
    //    }
    
    //    public void addAdvUtils(final AdvUtilities ppadvUtils) {
    //        final Object vvadvUtils=ppadvUtils;
    //        de.renew.unify.Tuple inTuple;
    //        de.renew.unify.Tuple outTuple;
    //        inTuple=new de.renew.unify.Tuple(1);
    //        try {
    //            de.renew.unify.Unify.unify(inTuple.getComponent(0),vvadvUtils,null);
    //        } catch (de.renew.unify.Impossible e) {
    //            throw new RuntimeException("Unification failed unexpectedly.");
    //        }
    //        outTuple=de.renew.call.SynchronisationRequest.synchronize(
    //        (de.renew.simulator.NetInstance)this,"addAdvUtils",inTuple);
    //    }
    
    
    //non-Renew-generated part:---------------------------------------------
    public void addOneTransRoleToNet(String transName, String roleName) {
        addPol(transName, roleName);
    }
    
    
    public void addOneDesignEntityRelatedAdvToNet(DesignEntityRelatedAdv adv) {
//        if (adv instanceof TaskPolicyAdvertisement) {
//            TaskPolicyAdvertisement tpAdv = (TaskPolicyAdvertisement)adv;
//            System.out.println("TEST: adding a TaskPolAdv");
//            String transName = tpAdv.getTransName();
//            for(Iterator i = tpAdv.getRoles().iterator(); i.hasNext(); ) {
//                String roleName = (String)i.next();
//                addPol(transName, roleName);
//            }
//            return;
//        }
        if (adv instanceof RoleAdvertisement) {
            RoleAdvertisement roleAdv = (RoleAdvertisement)adv;
            /** transName is not relevant for roles since they apply to the whole task */
            //System.out.println("TEST: adding a roleAdv");
            addRole("_", roleAdv.getRoleName(), roleAdv.getAuthorID().toString(), roleAdv.getAuthorName());
            return;
        }
        if (adv instanceof InputAdvertisement) {
            InputAdvertisement inputAdv = (InputAdvertisement)adv;
            //System.out.println("TEST: adding a inputAdv");
            addInput(inputAdv.getTransName(), inputAdv.getRoleName(), inputAdv.getAuthorID().toString(), inputAdv.getAuthorName());
            return;
        }
    }
    
    /** Used for testing */
    public void printAllKnownNets() {
        System.out.println("Starting: printAllKnownNets: ");
        Enumeration e = de.renew.simulator.Net.allKnownNets();
        if (e==null) {
            System.out.println("ERROR: e is null");
            return;
        }
        System.out.println("All known nets: ");
        while (e.hasMoreElements()) {
            Object obj = e.nextElement();
            System.out.println("obj type: " + obj.getClass().getName());
            if (obj instanceof de.renew.simulator.Net) {
                de.renew.simulator.Net n = (de.renew.simulator.Net)obj;
                System.out.println("Net name: " + n.getName());
            }
        }
    }
    
    /** Used for testing */
    public void printGetUplinkProviders(String channel) {
        System.out.println("Started printing uplink providers");
        Enumeration e = getUplinkProviders(channel);
        if(e==null) {
            System.out.println("Channel e is null");
            return;
        }
        while (e.hasMoreElements()) {
            Object obj = e.nextElement();
            System.out.println("Channel obj type: " + obj.getClass().getName());
            if (obj instanceof de.renew.simulator.TransitionInstance){
                de.renew.simulator.TransitionInstance t = (de.renew.simulator.TransitionInstance)obj;
                System.out.println("Trans name: " + t.toString());
            }
        }
        System.out.println("Finished printing uplink providers");
    }
    
    
}
