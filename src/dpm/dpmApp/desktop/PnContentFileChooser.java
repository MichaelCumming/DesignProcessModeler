/*
 * PnContentFileChooser.java
 *
 * Created on November 20, 2003, 9:54 AM
 */

package dpm.dpmApp.desktop;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;

import java.io.File;
import javax.swing.JFileChooser;

/** For choosing Petri Net Kernel files to open. Not yet used.
 * @author cumming
 */
public class PnContentFileChooser extends JFrame {
    protected DpmAppTopFrame topFrame;
    protected File selectedFile;
    
    /** Creates new form PnContentFileChooser */
    public PnContentFileChooser(DpmAppTopFrame topFrame) {
        this.topFrame = topFrame;
        initComponents();
        setPosition();
        FileFilter filter = new PnmlFileFilter();
        jFileChooser.setFileFilter(filter);
        this.show();
    }
    
    public void setPosition() {
        int width = 300;
        int height = 100;
        Dimension frameSize = this.getSize();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((screenSize.width - width) / 2, (screenSize.height - height) / 2);
        pack();
    }
    
    private class PnmlFileFilter extends FileFilter {
        public PnmlFileFilter() {
            super();
        }
        
        public String getExtension(File f) {
            String ext = null;
            String s = f.getName();
            int i = s.lastIndexOf('.');
            
            if (i > 0 &&  i < s.length() - 1) {
                ext = s.substring(i+1).toLowerCase();
            }
            return ext;
        }
        
        //Accept all directories and all pnml files.
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            else {
                String extension = getExtension(f);
                if (extension != null) {
                    if (extension.equals("pnml"))
                        return true;
                    else
                        return false;
                }
                return false;
            }
        }
        
        public String getDescription() {
            return "Petri-net files in .pnml format";
        }
    }
    
    //declare the file object
    //File selectedFile = null;
    //OR handle multiple files with
    //  File[] selectedFiles;
    //this accounts for multiple selected files.
    
    //Query the JFileChooser to get the input from the user
    //  if(returnVal == JFileChooser.APPROVE_OPTION)
    //  {
    //    selectedFile = fc.getSelectedFile();
    // OR
    // selectedFiles = fc.getSelectedFiles();
    //to handle multiple returns.
    //}
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jFileChooser = new javax.swing.JFileChooser();
        listPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Choose a Petri Net (*.pnml) file");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jFileChooser.setAcceptAllFileFilterUsed(false);
        jFileChooser.setFont(new java.awt.Font("Arial", 0, 12));
        jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserActionPerformed(evt);
            }
        });

        getContentPane().add(jFileChooser, new java.awt.GridBagConstraints());

        getContentPane().add(listPanel, new java.awt.GridBagConstraints());

        buttonsPanel.setLayout(new java.awt.BorderLayout());

        getContentPane().add(buttonsPanel, new java.awt.GridBagConstraints());

        pack();
    }//GEN-END:initComponents
    
    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserActionPerformed
        // Add your handling code here:
        int returnVal = jFileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            this.selectedFile = jFileChooser.getSelectedFile();
            topFrame.printMessage("You have chosen the file: " + jFileChooser.getSelectedFile().getName());
        }
        else if(returnVal == JFileChooser.CANCEL_OPTION) {
            this.dispose();
        }
        
    }//GEN-LAST:event_jFileChooserActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //System.exit(0);
        this.dispose();
    }//GEN-LAST:event_exitForm

    /** Getter for property selectedFile.
     * @return Value of property selectedFile.
     *
     */
    public File getSelectedFile() {
        return selectedFile;
    }    

    /** Setter for property selectedFile.
     * @param selectedFile New value of property selectedFile.
     *
     */
    public void setSelectedFile(File selectedFile) {
        this.selectedFile = selectedFile;
    }    
    
    /**
     * @param args the command line arguments
     */
    //    public static void main(String args[]) {
    //        new PnContentFileChooser().show();
    //    }
    //
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JPanel listPanel;
    // End of variables declaration//GEN-END:variables
    
    
    public void printMessage(String s) {
        if(topFrame == null) {
            System.out.println("ERROR: null topFrame in PnContentFileChooser: printMessage");
        }
        else {
            topFrame.printMessage(s);
        }
    }
}
