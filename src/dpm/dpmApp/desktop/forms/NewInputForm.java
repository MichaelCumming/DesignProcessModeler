/*
 * NewInputForm.java
 *
 * Created on February 3, 2004, 1:55 PM
 */

package dpm.dpmApp.desktop.forms;

import dpm.content.DesignEntity;
import dpm.content.advertisement.AdvUtilities;
import dpm.content.advertisement.net.LoopNetAdvertisement;
import dpm.dpmApp.desktop.DpmAppTopFrame;
import dpm.dpmApp.desktop.DpmTerms;
import dpm.peer.Peer;
import java.awt.Component;
import java.awt.GridLayout;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import net.jxta.peergroup.PeerGroup;

/**
 *
 * @author  cumming
 */
public class NewInputForm extends JFrame implements DpmTerms {
    private DesignEntity designEntity;
    private LoopNetAdvertisement loopNetAdv;
    private Peer appUser;
    private PeerGroup parentPG;
    private DpmAppTopFrame topFrame;
    private String name;
    private String curState;
    private String nextState;
    private String nextTrans;
    private String commentTrans;
    private AdvUtilities advUtils;
    private Set inputsNeededFromUser;
    
    
    /** Creates new form NewInputForm */
    public NewInputForm(DesignEntity designEntity, PeerGroup parentPG, DpmAppTopFrame topFrame) {
        this.designEntity = designEntity;
        this.loopNetAdv = designEntity.getLoopNetAdv();
        this.parentPG = parentPG;
        this.topFrame = topFrame;
        //this.appUser = topFrame.getAppUser();
        this.name = designEntity.getFullName();
        this.curState = designEntity.getCurrentState();
        //System.out.println("Cur state: " + curState + ". DesignEntity: " + name);
        this.nextState = loopNetAdv.getNextState(curState);
        /** Needed to make the InputAdv */
        this.nextTrans = loopNetAdv.getNextTransFromState(curState);
        int nextTransIdx = loopNetAdv.getIndex(nextTrans, loopNetAdv.getTransitions());
        /** corresponding index in comments */
        this.commentTrans = loopNetAdv.getValue(nextTransIdx, loopNetAdv.getComments());
        this.advUtils = topFrame.getAdvUtils();
        this.inputsNeededFromUser = designEntity.getStillNeededInputsThisAppUser(nextTrans);
        
        if(designEntity.linksOnlyPreventStateChange()) {
            Set incompletes = designEntity.getRelevantIncompleteIncomingEntities();
            topFrame.showInfoDialog("DoBefore links are preventing state change of entity: " +
            designEntity.getFullName() + NEWLINE +
            "Names of constraining incoming entities: " + NEWLINE +
            designEntity.stringSet2String(designEntity.getAllIncompleteNamesSet()), this);
            return;
        }
        if(designEntity.noPoliciesNextTrans()) {
            topFrame.showInfoDialog("No inputs are needed from anyone, for this transition.", this);
            return;
        }
        if(inputsNeededFromUser.isEmpty()) {
            topFrame.showInfoDialog("No inputs are needed from you at this time, for this transition." + NEWLINE +
            "To sign up for additional roles use: 'New Role'.", this);
            return;
        }
        
        initComponents();
        setupRolesPanel();
        taskNameField.setText(name);
        taskStateField.setText(curState);
        taskNextStateField.setText(nextState);
        commentField.setText(commentTrans);
        topFrame.setPosition(this.getWidth(), this.getHeight(), this);
        pack();
        show();
    }
    
    public void printMessage(String s) {
        topFrame.printMessage(s);
    }
    
    public void setupRolesPanel() {
        int num = inputsNeededFromUser.size();
        /** num+1 to accommodate the 'Your current roles' label */
        rolesPanel.setLayout(new GridLayout(num+1, 0));
        for(Iterator i = inputsNeededFromUser.iterator(); i.hasNext(); ) {
            String roleName = (String)i.next();
            addOneInputCheckBox(roleName);
        }
    }
    
    public void addOneInputCheckBox(String roleName) {
        JCheckBox cb = new JCheckBox(roleName);
        rolesPanel.add(cb);
    }
    
    public void createAllInputAdvs() {
        Component[] components = rolesPanel.getComponents();
        for (int i = 0; i < components.length; i++) {
            Object obj = components[i];
            if(obj instanceof JCheckBox) {
                JCheckBox cb = (JCheckBox)obj;
                if(cb.isSelected()) {
                    String roleName = cb.getText();
                    advUtils.createInputAdvertisement(designEntity, nextTrans, roleName, parentPG);
                }
            }
        }
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        rolesPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        infoPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nextStateLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        taskNameField = new javax.swing.JTextField();
        taskNextStateField = new javax.swing.JTextField();
        taskStateField = new javax.swing.JTextField();
        commentLabel = new javax.swing.JLabel();
        commentField = new javax.swing.JTextField();
        buttonsPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("New Input Form");
        setName("NewInputFormFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        rolesPanel.setLayout(new java.awt.GridLayout(1, 0));

        rolesPanel.setBorder(new javax.swing.border.TitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        rolesPanel.setFont(new java.awt.Font("Arial", 0, 12));
        titleLabel.setFont(new java.awt.Font("Arial", 1, 12));
        titleLabel.setText("Select Roles That Still Need Your Input");
        titleLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        rolesPanel.add(titleLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(rolesPanel, gridBagConstraints);

        infoPanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setFont(new java.awt.Font("Arial", 1, 12));
        nameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        infoPanel.add(nameLabel, gridBagConstraints);

        nextStateLabel.setFont(new java.awt.Font("Arial", 1, 12));
        nextStateLabel.setText("Next State");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        infoPanel.add(nextStateLabel, gridBagConstraints);

        stateLabel.setFont(new java.awt.Font("Arial", 1, 12));
        stateLabel.setText("Current State");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        infoPanel.add(stateLabel, gridBagConstraints);

        taskNameField.setBackground(new java.awt.Color(204, 204, 204));
        taskNameField.setEditable(false);
        taskNameField.setFont(new java.awt.Font("Arial", 0, 12));
        taskNameField.setMinimumSize(new java.awt.Dimension(100, 20));
        taskNameField.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(taskNameField, gridBagConstraints);

        taskNextStateField.setBackground(new java.awt.Color(204, 204, 204));
        taskNextStateField.setEditable(false);
        taskNextStateField.setFont(new java.awt.Font("Arial", 0, 12));
        taskNextStateField.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(taskNextStateField, gridBagConstraints);

        taskStateField.setBackground(new java.awt.Color(204, 204, 204));
        taskStateField.setEditable(false);
        taskStateField.setFont(new java.awt.Font("Arial", 0, 12));
        taskStateField.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(taskStateField, gridBagConstraints);

        commentLabel.setFont(new java.awt.Font("Arial", 1, 12));
        commentLabel.setText("Clicking 'OK' means:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        infoPanel.add(commentLabel, gridBagConstraints);

        commentField.setBackground(new java.awt.Color(204, 204, 204));
        commentField.setEditable(false);
        commentField.setFont(new java.awt.Font("Arial", 0, 12));
        commentField.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(commentField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(infoPanel, gridBagConstraints);

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        okButton.setFont(new java.awt.Font("Arial", 1, 12));
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(okButton, new java.awt.GridBagConstraints());

        cancelButton.setFont(new java.awt.Font("Arial", 1, 12));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(cancelButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(buttonsPanel, gridBagConstraints);

        pack();
    }//GEN-END:initComponents
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Add your handling code here:
        try {
            if (designEntity == null) {
                topFrame.showErrorDialog("Please select a Design Entity", this);
                return;
            }
            createAllInputAdvs();
            topFrame.refreshTreeWithLeafSelected();
            this.dispose();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.dispose();
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    //    public static void main(String args[]) {
    //        new NewInputForm().show();
    //    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField commentField;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nextStateLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel rolesPanel;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField taskNameField;
    private javax.swing.JTextField taskNextStateField;
    private javax.swing.JTextField taskStateField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    
}
