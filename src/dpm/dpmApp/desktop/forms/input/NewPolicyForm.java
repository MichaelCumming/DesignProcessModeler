/*
 * NewPolicyForm.java
 *
 * Created on March 1, 2004, 10:46 AM
 */

package dpm.dpmApp.desktop.forms.input;

import java.util.*;
import dpm.content.*;
import dpm.peer.Peer;
import dpm.dpmApp.desktop.DpmAppTopFrame;
import net.jxta.peergroup.PeerGroup;
import java.awt.*;
import dpm.content.advertisement.designEntity.*;
import dpm.content.advertisement.*;
import javax.swing.*;
import dpm.content.state.*;
import dpm.content.advertisement.*;
import dpm.content.advertisement.net.*;
import dpm.content.advertisement.designEntity.*;
import dpm.content.advertisement.designEntity.related.*;
import dpm.content.*;
import dpm.dpmApp.desktop.forms.*;
import dpm.dpmApp.desktop.forms.input.panels.*;


/**
 *
 * @author  cumming
 */
public class NewPolicyForm extends InputForm {
    protected DesignEntity entity;
    protected LoopNetAdvertisement loopNetAdv;

    
    /** Creates new form NewPolicyForm */
    public NewPolicyForm(DesignEntity entity, DpmAppTopFrame topFrame, PeerGroup parentPG) {
        super(parentPG, topFrame);
        this.entity = entity;
        this.loopNetAdv = entity.getLoopNetAdv();

        initComponents();
        setTitle("Add New Policies for: " + entity.getEntityType() + SPACE + entity.getFullName());
        setUpPoliciesPanel();
        topFrame.setPosition(this.getWidth(), this.getHeight(), this);
        /** pack after adding panels */
        pack();
        show();
    }
    
    public void setUpPoliciesPanel() {
        policiesPanel.setLayout(new java.awt.GridLayout(0, 1));
        ContentStorage transRoles = entity.getTransRoles();
        /** all transitions - not just ones with user input */
        TreeSet transitions = loopNetAdv.getTransitions();
        
        /** all possible transitions */
        for(int i = 0; i < transitions.size(); i++ ) {
            String transName = loopNetAdv.getValue(i, transitions);
            Set roles = transRoles.getStringSet(transName);
            PolicyInputPanelAdd pip = new PolicyInputPanelAdd(transName, roles); //false means check boxes not used
            policiesPanel.add(pip);
        }
    }
    
    /** Iterates through all policy panels and gets user input*/
    public ContentStorage getUserInput() {
        /** keyed by transName, with roles as values */
        ContentStorage transRoles = new ContentStorage("java.lang.String", null);
        JPanel polsPanel = getPoliciesPanel();
        Component[] components = polsPanel.getComponents();
        for (int i = 0; i < components.length; i++) {
            Object obj = components[i];
            if(obj instanceof PolicyInputPanelAdd) {
                PolicyInputPanelAdd pip = (PolicyInputPanelAdd)obj;
                String transName = pip.getCategoryName();
                Set roles = pip.getTextInputOnly();
                if(!roles.isEmpty()) {
                    transRoles.addStringSet(transName, roles);
                }
            }
        }
        return transRoles;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        scrollPane = new javax.swing.JScrollPane();
        policiesPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Add New Policies for Selected Entity");
        setName("NewPolicyFormFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        scrollPane.setFont(new java.awt.Font("Arial", 0, 12));
        scrollPane.setPreferredSize(new java.awt.Dimension(350, 350));
        policiesPanel.setName("policiesPanel");
        scrollPane.setViewportView(policiesPanel);

        getContentPane().add(scrollPane, new java.awt.GridBagConstraints());

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        buttonsPanel.setName("buttonsPanel");
        okButton.setFont(new java.awt.Font("Arial", 1, 12));
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(okButton, new java.awt.GridBagConstraints());

        cancelButton.setFont(new java.awt.Font("Arial", 1, 12));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(cancelButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(buttonsPanel, gridBagConstraints);

        pack();
    }//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Add your handling code here:
        advUtils.createAllPolicies(entity.getAdv(), getUserInput(), parentPG);
        topFrame.refreshTreeWithLeafSelected();
        this.dispose();
        
    }//GEN-LAST:event_okButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //System.exit(0);
        this.dispose();
    }//GEN-LAST:event_exitForm
    
    /** Getter for property policiesPanel.
     * @return Value of property policiesPanel.
     *
     */
    public javax.swing.JPanel getPoliciesPanel() {
        return policiesPanel;
    }
    
    /** Setter for property policiesPanel.
     * @param policiesPanel New value of property policiesPanel.
     *
     */
    public void setPoliciesPanel(javax.swing.JPanel policiesPanel) {
        this.policiesPanel = policiesPanel;
    }
    
    /**
     * @param args the command line arguments
     */
    //    public static void main(String args[]) {
    //        new NewPolicyForm().show();
    //    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel policiesPanel;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    
}
