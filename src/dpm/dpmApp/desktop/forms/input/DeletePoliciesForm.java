/*
 * DeletePoliciesForm.java
 *
 * Created on Oct 12, 2004
 */

package dpm.dpmApp.desktop.forms.input;

import dpm.content.ContentStorage;
import dpm.content.DesignEntity;
import dpm.content.advertisement.AdvUtilities;
import dpm.dpmApp.desktop.DpmAppTopFrame;
import dpm.dpmApp.desktop.DpmTerms;
import dpm.dpmApp.desktop.subpages.PeerGroupsTreePage;
import dpm.peer.Peer;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import net.jxta.peergroup.PeerGroup;
import dpm.dpmApp.desktop.forms.*;
import dpm.dpmApp.desktop.forms.input.*;
import dpm.dpmApp.desktop.forms.input.panels.*;
import dpm.content.advertisement.designEntity.related.constraint.*;
import dpm.content.advertisement.net.*;


/** The user input form for new Tasks that is: TaskAdvertisements.
 * @author cumming
 * @since December 31, 2003, 9:20 AM
 */
public class DeletePoliciesForm extends InputForm {
    private DesignEntity entity;
    private ContentStorage existingTransRoles;
    
    /** Creates new DeletePoliciesForm */
    public DeletePoliciesForm(DesignEntity entity, PeerGroup parentPG, DpmAppTopFrame topFrame) {
        super(parentPG, topFrame);
        this.entity = entity;
        this.existingTransRoles = entity.getTransRoles();
        
        topFrame.test("TranRoles size in DPolsForm", existingTransRoles.size(), entity.getLoopNetAdv().getNumberOfTransitions());
        initComponents();
        setTitle("Delete policy constraints for entity " + entity.getFullName());
        setupPoliciesPanel();
        topFrame.setPosition(this.getWidth(), this.getHeight(), this);
        pack();
        show();
    }
    
    /**getLoopAdv starts up first thing */
    public void setupPoliciesPanel() {
        /** (rows, cols). '0' means that any number of rows can be added */
        policiesPanel.setLayout(new GridLayout(0, 1));
        if(existingTransRoles == null) {
            JLabel emptyPolsLabel = new JLabel();
            emptyPolsLabel.setFont(NORMAL_PLAIN);
            emptyPolsLabel.setText("Error: no policies exist for this entity");
            policiesPanel.add(emptyPolsLabel);
            return;
        }
        /**For each row in transRoles */
        for (int i = 0; i < existingTransRoles.size(); i++) {
            Integer curI = new Integer(i);
            String transNameWPrefix = existingTransRoles.getNameWPrefix(curI);
            Set rolesSet = existingTransRoles.getRolesSet(curI);
            PolicyInputPanelDelete pip = new PolicyInputPanelDelete(transNameWPrefix, rolesSet);
            policiesPanel.add(pip);
        }
    }
    
    /** Iterates through all policy panels and gets user input*/
    public ContentStorage getTransRolesRolesToKeep() {
        /** keyed by transName, with roles as values */
        ContentStorage transRoles = new ContentStorage("java.lang.String", null);
        int pipNum = 0;
        JPanel polsPanel = getPoliciesPanel();
        Component[] components = polsPanel.getComponents();
        
        for (int i = 0; i < components.length; i++) {
            Object obj = components[i];
            if(obj instanceof PolicyInputPanelDelete) {
                pipNum++;
                PolicyInputPanelDelete pip = (PolicyInputPanelDelete)obj;
                String transName = pip.getCategoryName();
                Set rolesToKeep = pip.getAllRolesToKeep();
                /**Only transitions where something has been deleted, are placed into updatedTransRoles */
                if(pip.allDeleted()) {
                    transRoles.addString(transName, EMPTY_STRING);
                }
                else if(pip.someDeleted()) {
                    /**Empty sets must be also recorded, else advUtils won't detete and recreate that polAdv */
                    transRoles.addStringSet(transName, rolesToKeep);
                }
            }
        }
        topFrame.test("Num pips in DPolsForm", pipNum, entity.getLoopNetAdv().getNumberOfTransitions());
        //topFrame.test("Size of updatedTransRoles in DPolsForm", updatedTransRoles.size(), entity.getLoopNetAdv().getNumberOfTransitions());
        System.out.println(">>Print out of transitions with changes: ");
        transRoles.printStringCS();
        return transRoles;
    } 
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        scrollPane = new javax.swing.JScrollPane();
        policiesPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setName("NewTaskFormFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        scrollPane.setBorder(new javax.swing.border.TitledBorder(null, "Select Roles to delete for each Transition", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Arial", 1, 12)));
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setName("scrollPane");
        scrollPane.setPreferredSize(new java.awt.Dimension(350, 350));
        policiesPanel.setLayout(new java.awt.GridLayout(0, 1));

        policiesPanel.setFont(new java.awt.Font("Arial", 0, 12));
        policiesPanel.setName("policiesPanel");
        scrollPane.setViewportView(policiesPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(scrollPane, gridBagConstraints);

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        buttonsPanel.setFont(new java.awt.Font("Arial", 0, 12));
        buttonsPanel.setName("buttonsPanel");
        okButton.setFont(new java.awt.Font("Arial", 1, 12));
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(okButton, new java.awt.GridBagConstraints());

        cancelButton.setFont(new java.awt.Font("Arial", 1, 12));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(cancelButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 10, 0);
        getContentPane().add(buttonsPanel, gridBagConstraints);

        pack();
    }//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Add your handling code here
        try {
            /**All transitions in updatedTransRoles are deleted and recreated */
            advUtils.deleteAndRecreateAllPolicies(entity, getTransRolesRolesToKeep(), parentPG);
            /**Refresh the tree with the new leaf */
            PeerGroupsTreePage treePage = topFrame.getSelectedPGTreePage();
            if(treePage.pgNodeSelected()) {
                topFrame.refreshTreeWithNodeSelected();
            }
            else if(treePage.pgLeafSelected()) {
                topFrame.refreshTreeWithLeafSelected();
            }
            dispose();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_okButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        dispose();
    }//GEN-LAST:event_exitForm
    
    /** Getter for property policiesPanel.
     * @return Value of property policiesPanel.
     *
     */
    public JPanel getPoliciesPanel() {
        return policiesPanel;
    }
    
    /** Setter for property policiesPanel.
     * @param policiesPanel New value of property policiesPanel.
     *
     */
    public void setPoliciesPanel(JPanel policiesPanel) {
        this.policiesPanel = policiesPanel;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel policiesPanel;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    
}
